{"ast":null,"code":"import { toArray } from './util';\nimport { fetchAsDataURL } from './dataurl';\nimport { shouldEmbed, embedResources } from './embed-resources';\nconst cssFetchCache = {};\n\nasync function fetchCSS(url) {\n  let cache = cssFetchCache[url];\n\n  if (cache != null) {\n    return cache;\n  }\n\n  const res = await fetch(url);\n  const cssText = await res.text();\n  cache = {\n    url,\n    cssText\n  };\n  cssFetchCache[url] = cache;\n  return cache;\n}\n\nasync function embedFonts(data, options) {\n  let cssText = data.cssText;\n  const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n  const fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n  const loadFonts = fontLocs.map(async loc => {\n    let url = loc.replace(regexUrl, '$1');\n\n    if (!url.startsWith('https://')) {\n      url = new URL(url, data.url).href;\n    }\n\n    return fetchAsDataURL(url, options.fetchRequestInit, _ref => {\n      let {\n        result\n      } = _ref;\n      cssText = cssText.replace(loc, `url(${result})`);\n      return [loc, result];\n    });\n  });\n  return Promise.all(loadFonts).then(() => cssText);\n}\n\nfunction parseCSS(source) {\n  if (source == null) {\n    return [];\n  }\n\n  const result = [];\n  const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi; // strip out comments\n\n  let cssText = source.replace(commentsRegex, ''); // eslint-disable-next-line prefer-regex-literals\n\n  const keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi'); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    const matches = keyframesRegex.exec(cssText);\n\n    if (matches === null) {\n      break;\n    }\n\n    result.push(matches[0]);\n  }\n\n  cssText = cssText.replace(keyframesRegex, '');\n  const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi; // to match css & media queries together\n\n  const combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' + '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'; // unified regex\n\n  const unifiedRegex = new RegExp(combinedCSSRegex, 'gi'); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    let matches = importRegex.exec(cssText);\n\n    if (matches === null) {\n      matches = unifiedRegex.exec(cssText);\n\n      if (matches === null) {\n        break;\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex;\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex;\n    }\n\n    result.push(matches[0]);\n  }\n\n  return result;\n}\n\nasync function getCSSRules(styleSheets, options) {\n  const ret = [];\n  const deferreds = []; // First loop inlines imports\n\n  styleSheets.forEach(sheet => {\n    if ('cssRules' in sheet) {\n      try {\n        toArray(sheet.cssRules || []).forEach((item, index) => {\n          if (item.type === CSSRule.IMPORT_RULE) {\n            let importIndex = index + 1;\n            const url = item.href;\n            const deferred = fetchCSS(url).then(metadata => embedFonts(metadata, options)).then(cssText => parseCSS(cssText).forEach(rule => {\n              try {\n                sheet.insertRule(rule, rule.startsWith('@import') ? importIndex += 1 : sheet.cssRules.length);\n              } catch (error) {\n                console.error('Error inserting rule from remote css', {\n                  rule,\n                  error\n                });\n              }\n            })).catch(e => {\n              console.error('Error loading remote css', e.toString());\n            });\n            deferreds.push(deferred);\n          }\n        });\n      } catch (e) {\n        const inline = styleSheets.find(a => a.href == null) || document.styleSheets[0];\n\n        if (sheet.href != null) {\n          deferreds.push(fetchCSS(sheet.href).then(metadata => embedFonts(metadata, options)).then(cssText => parseCSS(cssText).forEach(rule => {\n            inline.insertRule(rule, sheet.cssRules.length);\n          })).catch(err => {\n            console.error('Error loading remote stylesheet', err);\n          }));\n        }\n\n        console.error('Error inlining remote css file', e);\n      }\n    }\n  });\n  return Promise.all(deferreds).then(() => {\n    // Second loop parses rules\n    styleSheets.forEach(sheet => {\n      if ('cssRules' in sheet) {\n        try {\n          toArray(sheet.cssRules || []).forEach(item => {\n            ret.push(item);\n          });\n        } catch (e) {\n          console.error(`Error while reading CSS rules from ${sheet.href}`, e);\n        }\n      }\n    });\n    return ret;\n  });\n}\n\nfunction getWebFontRules(cssRules) {\n  return cssRules.filter(rule => rule.type === CSSRule.FONT_FACE_RULE).filter(rule => shouldEmbed(rule.style.getPropertyValue('src')));\n}\n\nasync function parseWebFontRules(node, options) {\n  if (node.ownerDocument == null) {\n    throw new Error('Provided element is not within a Document');\n  }\n\n  const styleSheets = toArray(node.ownerDocument.styleSheets);\n  const cssRules = await getCSSRules(styleSheets, options);\n  return getWebFontRules(cssRules);\n}\n\nexport async function getWebFontCSS(node, options) {\n  const rules = await parseWebFontRules(node, options);\n  const cssTexts = await Promise.all(rules.map(rule => {\n    const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n    return embedResources(rule.cssText, baseUrl, options);\n  }));\n  return cssTexts.join('\\n');\n}\nexport async function embedWebFonts(clonedNode, options) {\n  const cssText = options.fontEmbedCSS != null ? options.fontEmbedCSS : options.skipFonts ? null : await getWebFontCSS(clonedNode, options);\n\n  if (cssText) {\n    const styleNode = document.createElement('style');\n    const sytleContent = document.createTextNode(cssText);\n    styleNode.appendChild(sytleContent);\n\n    if (clonedNode.firstChild) {\n      clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n    } else {\n      clonedNode.appendChild(styleNode);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["toArray","fetchAsDataURL","shouldEmbed","embedResources","cssFetchCache","fetchCSS","url","cache","res","fetch","cssText","text","embedFonts","data","options","regexUrl","fontLocs","match","loadFonts","map","loc","replace","startsWith","URL","href","fetchRequestInit","result","Promise","all","then","parseCSS","source","commentsRegex","keyframesRegex","RegExp","matches","exec","push","importRegex","combinedCSSRegex","unifiedRegex","lastIndex","getCSSRules","styleSheets","ret","deferreds","forEach","sheet","cssRules","item","index","type","CSSRule","IMPORT_RULE","importIndex","deferred","metadata","rule","insertRule","length","error","console","catch","e","toString","inline","find","a","document","err","getWebFontRules","filter","FONT_FACE_RULE","style","getPropertyValue","parseWebFontRules","node","ownerDocument","Error","getWebFontCSS","rules","cssTexts","baseUrl","parentStyleSheet","join","embedWebFonts","clonedNode","fontEmbedCSS","skipFonts","styleNode","createElement","sytleContent","createTextNode","appendChild","firstChild","insertBefore"],"sources":["C:\\Users\\donia\\Documents\\Tunisys\\node_modules\\html-to-image\\src\\embed-webfonts.ts"],"sourcesContent":["import type { Options } from './types'\nimport { toArray } from './util'\nimport { fetchAsDataURL } from './dataurl'\nimport { shouldEmbed, embedResources } from './embed-resources'\n\ninterface Metadata {\n  url: string\n  cssText: string\n}\n\nconst cssFetchCache: { [href: string]: Metadata } = {}\n\nasync function fetchCSS(url: string) {\n  let cache = cssFetchCache[url]\n  if (cache != null) {\n    return cache\n  }\n\n  const res = await fetch(url)\n  const cssText = await res.text()\n  cache = { url, cssText }\n\n  cssFetchCache[url] = cache\n\n  return cache\n}\n\nasync function embedFonts(data: Metadata, options: Options): Promise<string> {\n  let cssText = data.cssText\n  const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g\n  const fontLocs = cssText.match(/url\\([^)]+\\)/g) || []\n  const loadFonts = fontLocs.map(async (loc: string) => {\n    let url = loc.replace(regexUrl, '$1')\n    if (!url.startsWith('https://')) {\n      url = new URL(url, data.url).href\n    }\n\n    return fetchAsDataURL<[string, string]>(\n      url,\n      options.fetchRequestInit,\n      ({ result }) => {\n        cssText = cssText.replace(loc, `url(${result})`)\n        return [loc, result]\n      },\n    )\n  })\n\n  return Promise.all(loadFonts).then(() => cssText)\n}\n\nfunction parseCSS(source: string) {\n  if (source == null) {\n    return []\n  }\n\n  const result: string[] = []\n  const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi\n  // strip out comments\n  let cssText = source.replace(commentsRegex, '')\n\n  // eslint-disable-next-line prefer-regex-literals\n  const keyframesRegex = new RegExp(\n    '((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})',\n    'gi',\n  )\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const matches = keyframesRegex.exec(cssText)\n    if (matches === null) {\n      break\n    }\n    result.push(matches[0])\n  }\n  cssText = cssText.replace(keyframesRegex, '')\n\n  const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi\n  // to match css & media queries together\n  const combinedCSSRegex =\n    '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n    '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'\n  // unified regex\n  const unifiedRegex = new RegExp(combinedCSSRegex, 'gi')\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let matches = importRegex.exec(cssText)\n    if (matches === null) {\n      matches = unifiedRegex.exec(cssText)\n      if (matches === null) {\n        break\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex\n    }\n    result.push(matches[0])\n  }\n\n  return result\n}\n\nasync function getCSSRules(\n  styleSheets: CSSStyleSheet[],\n  options: Options,\n): Promise<CSSStyleRule[]> {\n  const ret: CSSStyleRule[] = []\n  const deferreds: Promise<number | void>[] = []\n\n  // First loop inlines imports\n  styleSheets.forEach((sheet) => {\n    if ('cssRules' in sheet) {\n      try {\n        toArray<CSSRule>(sheet.cssRules || []).forEach((item, index) => {\n          if (item.type === CSSRule.IMPORT_RULE) {\n            let importIndex = index + 1\n            const url = (item as CSSImportRule).href\n            const deferred = fetchCSS(url)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  try {\n                    sheet.insertRule(\n                      rule,\n                      rule.startsWith('@import')\n                        ? (importIndex += 1)\n                        : sheet.cssRules.length,\n                    )\n                  } catch (error) {\n                    console.error('Error inserting rule from remote css', {\n                      rule,\n                      error,\n                    })\n                  }\n                }),\n              )\n              .catch((e) => {\n                console.error('Error loading remote css', e.toString())\n              })\n\n            deferreds.push(deferred)\n          }\n        })\n      } catch (e) {\n        const inline =\n          styleSheets.find((a) => a.href == null) || document.styleSheets[0]\n        if (sheet.href != null) {\n          deferreds.push(\n            fetchCSS(sheet.href)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  inline.insertRule(rule, sheet.cssRules.length)\n                }),\n              )\n              .catch((err: unknown) => {\n                console.error('Error loading remote stylesheet', err)\n              }),\n          )\n        }\n        console.error('Error inlining remote css file', e)\n      }\n    }\n  })\n\n  return Promise.all(deferreds).then(() => {\n    // Second loop parses rules\n    styleSheets.forEach((sheet) => {\n      if ('cssRules' in sheet) {\n        try {\n          toArray<CSSStyleRule>(sheet.cssRules || []).forEach((item) => {\n            ret.push(item)\n          })\n        } catch (e) {\n          console.error(`Error while reading CSS rules from ${sheet.href}`, e)\n        }\n      }\n    })\n\n    return ret\n  })\n}\n\nfunction getWebFontRules(cssRules: CSSStyleRule[]): CSSStyleRule[] {\n  return cssRules\n    .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n    .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')))\n}\n\nasync function parseWebFontRules<T extends HTMLElement>(\n  node: T,\n  options: Options,\n) {\n  if (node.ownerDocument == null) {\n    throw new Error('Provided element is not within a Document')\n  }\n\n  const styleSheets = toArray<CSSStyleSheet>(node.ownerDocument.styleSheets)\n  const cssRules = await getCSSRules(styleSheets, options)\n\n  return getWebFontRules(cssRules)\n}\n\nexport async function getWebFontCSS<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): Promise<string> {\n  const rules = await parseWebFontRules(node, options)\n  const cssTexts = await Promise.all(\n    rules.map((rule) => {\n      const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null\n      return embedResources(rule.cssText, baseUrl, options)\n    }),\n  )\n\n  return cssTexts.join('\\n')\n}\n\nexport async function embedWebFonts<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const cssText =\n    options.fontEmbedCSS != null\n      ? options.fontEmbedCSS\n      : options.skipFonts\n      ? null\n      : await getWebFontCSS(clonedNode, options)\n\n  if (cssText) {\n    const styleNode = document.createElement('style')\n    const sytleContent = document.createTextNode(cssText)\n\n    styleNode.appendChild(sytleContent)\n\n    if (clonedNode.firstChild) {\n      clonedNode.insertBefore(styleNode, clonedNode.firstChild)\n    } else {\n      clonedNode.appendChild(styleNode)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}